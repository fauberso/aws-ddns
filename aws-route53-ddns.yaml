AWSTemplateFormatVersion: '2010-09-09'

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Route53 Configuration"
        Parameters: 
          - HostedZoneId
      - Label: 
          default: "DDNS Client Configuration"
        Parameters: 
          - UserName
          - Password
    ParameterLabels: 
      HostedZoneId: 
        default: "Hosted Zone ID"
      UserName: 
        default: "User Name"
      Password: 
        default: "Password"
        
Parameters:
  HostedZoneId:
    Type: String
    Description: Zone ID of the Route53 hosted zone in which entries shall be modified (e.g. Z1AB1Z2CDE3FG4, this is NOT the domain name).
    MinLength: 14
    MaxLength: 14
    AllowedPattern: "[A-Z0-9]+" 
  UserName:
    Type: String
    Description: The user name against which to check the credentials passed by the DDNS Client. This is the user name you entered in your Router or DDNS Script.
  Password:
    Type: String
    Description: The password against which to check the credentials passed by the DDNS Client.
    
#Globals:
#  Api:
    # Logging, Metrics, Throttling, and all other Stage settings
 #   MethodSettings: [{
        # Turn on Info logging
 #       "LoggingLevel": "INFO",
        # Enable Detailed CloudWatch Metrics
  #      "MetricsEnabled": False,
        # Log full requests/responses data
   #     "DataTraceEnabled": True,
        # On all Paths & methods
    #    "ResourcePath": "/*",
 #       "HttpMethod": "*",
  #  }]

Resources:
  # API Gateway, including Swagger definition. The security requirements are specified as Amazon-specific extensions in the Swagger.
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration: 
        Types: 
          - REGIONAL
      Name: DDNS
      Description: A Route53 and Lambda based implementation of Dynamic DNS
      
  # Resource in the API Gateway corresponding to the /nic/update path
  NicResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "nic"
      RestApiId: !Ref ApiGateway
  UpdateResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref NicResource
      PathPart: "update"
      RestApiId: !Ref ApiGateway

  # Update method in the API Gateway
  UpdateMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref DDNSAuthorizer
      ResourceId: !Ref UpdateResource
      HttpMethod: GET
      Integration:
        Type: AWS
        # API Gateway uses POST regardless of how it is called
        IntegrationHttpMethod: POST
        Uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DDNSLambdaFunction.Arn}/invocations
      RestApiId: !Ref ApiGateway

  # API Deployment: Created implicitely otherwise, but might fail if executed before UpdateMethod
  ApiGatewayDeployment:
     Type: "AWS::ApiGateway::Deployment"
     DependsOn: UpdateMethod
     Properties:
       RestApiId: !Ref ApiGateway
       StageName: prod

  # Lambda-based custom Authorizer for HTTP Basic Auth
  DDNSAuthorizer: 
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      Name: DDNSAuthorizer
      Type: REQUEST
      IdentitySource: method.request.header.Authorization
      AuthorizerUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DDNSAuthorizerFunction.Arn}/invocations
      AuthorizerCredentials:
        Fn::Sub: ${ApiGatewayAuthorizerRole.Arn}
      AuthorizerResultTtlInSeconds: 60 
      RestApiId: !Ref ApiGateway

  # Main Lambda function: Calls Route53. Users are already authenticated when this is reached.
  DDNSLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: net.auberson.awsddns
        S3Key: awsddns-1.0.0.jar
      Handler: net.auberson.awsddns.function.Update
      Runtime: java8
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZoneId
      Role: !GetAtt DDNSLambdaFunctionRole.Arn
            
  # Authorizer Function: Checks the credentials passed in the HTTP Headers
  DDNSAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: net.auberson.awsddns
        S3Key: awsddns-1.0.0.jar
      Handler: net.auberson.awsddns.function.Authorizer
      Runtime: java8
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          USERNAME: !Ref UserName    
          PASSWORD: !Ref Password    
      Role: !GetAtt CustomAuthorizerFunctionRole.Arn

  # Custom role used by the API Gateway to access the Authorizer Lambda function
  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: 
        - PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource:
                  - Fn::Sub: ${DDNSLambdaFunction.Arn}
                  - Fn::Sub: ${DDNSAuthorizerFunction.Arn}
         
  # Custom role used by the DDNS Lambda function
  DDNSLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: 
        - PolicyName: "ModifyRoute53Entries"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
            - Effect: Allow
              Action: route53:GetHostedZone
              Resource: !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
            - Effect: Allow
              Action: route53:ChangeResourceRecordSets
              Resource: !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
            - Effect: Allow
              Action: route53:ListResourceRecordSets
              Resource: !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
            
  # Custom role used by the Authorizer Lambda function (add policies here if the Authorizer needs to access resources)
  CustomAuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole