AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      -
        Label: 
          default: "Route53 Configuration"
        Parameters: 
          - HostedZoneId
    ParameterLabels: 
      HostedZoneId: 
        default: "Hosted Zone ID"
        
Parameters:
  HostedZoneId:
    Type: String
    Description: Zone ID of the Route53 hosted zone in which entries shall be modified (e.g. Z1AB1Z2CDE3FG4, this is NOT the domain name).
    MinLength: 14
    MaxLength: 14
    AllowedPattern: "[A-Z0-9]+" 


Globals:
  Api:
    # Logging, Metrics, Throttling, and all other Stage settings
    MethodSettings: [{
        # Turn on Info logging
        "LoggingLevel": "INFO",
        # Enable Detailed CloudWatch Metrics
        "MetricsEnabled": False,
        # Log full requests/responses data
        "DataTraceEnabled": True,
        # On all Paths & methods
        "ResourcePath": "/*",
        "HttpMethod": "*",
    }]

Resources:
  # API Gateway, including Swagger definition. The security requirements are specified as Amazon-specific extensions in the Swagger.
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: "2.0"
        info:
          title: 
            Ref: AWS::StackName
          description: A Route53 and Lambda based implementation of Dynamic DNS
          version: 1.0.0
        securityDefinitions:
          DDNSAuthorizer:
            type: apiKey #basic
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              type: request
              identitySource: method.request.header.Authorization
              authorizerUri:
                Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DDNSAuthorizerFunction.Arn}/invocations
              authorizerCredentials:
                Fn::Sub: ${ApiGatewayAuthorizerRole.Arn}
              authorizerResultTtlInSeconds: 60
        paths:
          "/nic/update":
            get: #x-amazon-apigateway-any-method:
              summary: Update IP Address
              description: Updates the IP address associated with a hostname
              parameters:
              - name: hostname
                in: query
                description: host name
                required: true
                type: string
              - name: myip
                in: query
                description: ip address (defaults to requester's IP address)
                required: false
                type: string
              - name: Authorization
                in: header
                description: DDNS Credentials
                required: false
                type: string
              responses:
                '200':
                  description: IP Successfully updated
              security:
                - DDNSAuthorizer: []
              responses: {}
              
              x-amazon-apigateway-integration:
                type: aws
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                # API GAteway uses POST regardless of how it is called
                httpMethod: POST
                credentials: !GetAtt ApiGatewayAuthorizerRole.Arn
                uri: !Join
                - ''
                -
                  - 'arn:aws:apigateway:'
                  - !Ref 'AWS::Region'
                  - ':lambda:path/2015-03-31/functions/arn:aws:lambda:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':function:'
                  - !Ref DDNSLambdaFunction
                  - '/invocations'
              responses:
                '200':
                  description: Default response
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
        # Request validation
        x-amazon-apigateway-request-validators:
          DDNSValidator:
            validateRequestBody: false
            validateRequestParameters: true
        x-amazon-apigateway-request-validator : DDNSValidator

  # Main Lambda function: Calls Route53. Users are already authenticated when this is reached.
  DDNSLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/awsddns-1.0.0.jar
      Handler: net.auberson.awsddns.function.Update
      Runtime: java8
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZoneId
      Policies: 
        Statement:
          - Effect: Allow
            Action: route53:GetHostedZone
            Resource: !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
          - Effect: Allow
            Action: route53:ChangeResourceRecordSets
            Resource: !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
          - Effect: Allow
            Action: route53:ListResourceRecordSets
            Resource: !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
      Events:
        Call:
          # eg GET http://username:password@ddns.auberson.net/nic/update?hostname=vpn.auberson.net&myip=188.155.185.27
          Type: Api
          Properties:
            Path: /nic/update
            Method: GET
            RestApiId: !Ref ApiGateway
            
  # Authorizer Function: Checks the credentials passed in the HTTP Headers
  DDNSAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/awsddns-1.0.0.jar
      Handler: net.auberson.awsddns.function.Authorizer
      Runtime: java8
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZoneId    
      Policies: 
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: '*'
          - Effect: Allow
            Action: logs:CreateLogStream
            Resource: '*'
          - Effect: Allow
            Action: logs:PutLogEvents
            Resource: '*'
      Role:
        Fn::Sub: ${CustomAuthorizerFunctionRole.Arn}
        
  # Custom role used by the API Gateway to access the Authorizer Lambda function
  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: 
        - 
          PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${DDNSAuthorizerFunction.Arn}
                  
  # Custom role used by the Authorizer Lambda function (add policies here if the Authorizer needs to access resources)
  CustomAuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole